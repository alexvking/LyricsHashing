Alex King
COMP 15
HW5 - Song Search

Design Plan:

For my implementation of the song search, I want to store song information
in two data structures. First, I will read in all songs, creating Song
structures with artist, title and an array for lyrics strings, 
and place each one of these structures in a static array.

After the array has been created, I will then loop through the array to create
a "local" hash table based on each word in every song's lyrics. Each element
will hold the word, and array with indices where the word appears in the song's
array of lyrics (along with a length of the array).

There will also be a "global" hash table created for occurrences of words in 
all songs. Each element will have a struture with the word string and an
ordered static array of which songs have the most occurrences of said word.
For example, the word node "apple" could have an occurrence list of structures
like mentioned above:

1. Song X (index 400 in master array) mentions "apple" at positions 
[1, 8, 45, 90], a total of 4 times.
2. Song Z (index 892 in master array) mentions "apple" at positions
[34, 88], a total of 2 times.

This information will be stored in structures. This "occurrence list" will
be a dynamic array of size 10. The logic for insertion will be: if the song
to be inserted (e.g. Song Y with 3 occurrences of "apple") is greater than the
last item in the occurrence list, it is added in, and the occurrence list is
sorted. Because this will always be a nearly-sorted list, insertion sort will
be implemented, as it is one of the fastest algorithms for this type of list.

Both the local and global hash tables will incorporate chaining for collisions.
So, the master database array will be looped through, with each song generating
an list of words and occurrences in a hash table, with that data being added
to a global hash table if it has one of the highest occurrences of the word.

After the database is completely built, there will be a static array with
~172,000 song structures (imagining using full data) and a hash table 
containing every single word that appears in all of the database's lyrics. Each
node that signifies a word will have the occurrence list, which will include
information to rapidly find the song and word occurrences from the master
array: index of song, and index of every occurrence of the word in the lyric
array.

A search will go as follows: If the user searches for "apple", the word will
be hashed and will go to that index of the global hash table. If there's a
collision, it will walk to the next nodes as necessary until "apple" matches
the word in the word node strucure. From there, it will loop through the 
occurrence list, listing Title, Artist and Context for each time the word
is listed. For words like "apple", there will probably be 10 different songs
in the large database that list it, so there will be at least 10 printouts.

Search time will not wildly differ between specific words and general words.
This is because it will be near constant-time lookup to find a word's list
in which songs it occurs most. There is also no searching necessary for where
the word is mentioned in the song; its index is included. The majority
of the search time will be spent generating context and outputting results.